

# React TypeScript Patterns for MapItOut

## Component Architecture (Simplified)

**Key Principle**: Keep components focused and simple
- One component per file
- Props interfaces defined inline or in types/
- No over-engineering with complex abstractions

## Component Structure

```typescript
// Standard component pattern
interface ComponentProps {
  // Props here
}

export function ComponentName({ prop1, prop2 }: ComponentProps) {
  // Hooks first
  const store = useMapStore();
  
  // Event handlers
  const handleClick = () => {
    // Logic here
  };
  
  // Render
  return (
    <div className="component-classes">
      {/* Content */}
    </div>
  );
}
```

## State Management (Zustand)

```typescript
// Store pattern - keep it simple
interface MapState {
  // Data
  nodes: Map<string, Node>;
  selectedId: string | null;
  layoutType: 'center' | 'top';
  
  // Actions - return void, update state directly
  createNode: (parentId: string, text?: string) => void;
  updateNode: (id: string, updates: Partial<Node>) => void;
  selectNode: (id: string) => void;
  setLayoutType: (type: 'center' | 'top') => void;
}

export const useMapStore = create<MapState>((set, get) => ({
  // Initial state
  nodes: new Map(),
  selectedId: null,
  layoutType: 'center',
  
  // Actions
  createNode: (parentId, text = '') => {
    const newId = nanoid();
    const newNode: Node = {
      id: newId,
      text,
      children: [],
      parent: parentId,
      metadata: {
        created: Date.now(),
        modified: Date.now(),
        collapsed: false,
      }
    };
    
    set(state => {
      const newNodes = new Map(state.nodes);
      newNodes.set(newId, newNode);
      
      // Update parent's children array
      if (parentId) {
        const parent = newNodes.get(parentId);
        if (parent) {
          parent.children.push(newId);
          parent.metadata.modified = Date.now();
        }
      }
      
      return { nodes: newNodes, selectedId: newId };
    });
  },
  
  updateNode: (id, updates) => {
    set(state => {
      const newNodes = new Map(state.nodes);
      const node = newNodes.get(id);
      if (node) {
        Object.assign(node, updates);
        node.metadata.modified = Date.now();
      }
      return { nodes: newNodes };
    });
  },
  
  selectNode: (id) => set({ selectedId: id }),
  setLayoutType: (type) => set({ layoutType: type }),
}));
```

## Canvas Rendering Pattern

```typescript
// Canvas component pattern
export function MapCanvas() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const store = useMapStore();
  
  // Calculate positions on every render
  const positions = useMemo(() => {
    return calculateLayout(store.nodes, store.layoutType);
  }, [store.nodes, store.layoutType]);
  
  // Render to canvas
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Draw connections first
    drawConnections(ctx, store.nodes, positions);
    
    // Draw nodes
    drawNodes(ctx, store.nodes, positions);
  }, [positions, store.nodes]);
  
  return (
    <canvas
      ref={canvasRef}
      className="w-full h-full"
      width={1600}
      height={800}
    />
  );
}
```

## Hook Patterns

```typescript
// Custom hook pattern
export function useKeyboardNavigation() {
  const store = useMapStore();
  
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      switch (e.key) {
        case 'Tab':
          e.preventDefault();
          if (store.selectedId) {
            store.createNode(store.selectedId);
          }
          break;
          
        case 'Enter':
          e.preventDefault();
          if (store.selectedId) {
            const node = store.nodes.get(store.selectedId);
            if (node?.parent) {
              store.createNode(node.parent);
            }
          }
          break;
      }
    };
    
    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [store]);
}
```

## Type Definitions

```typescript
// Keep types simple and focused
export interface Node {
  id: string;
  text: string;
  children: string[];
  parent: string | null;
  metadata: {
    created: number;
    modified: number;
    collapsed: boolean;
  };
}

export interface Position {
  x: number;
  y: number;
  width: number;
  height: number;
}

export type LayoutType = 'center' | 'top';
```

## File Naming Convention

- Components: `PascalCase.tsx` (e.g., `MapCanvas.tsx`)
- Hooks: `use-kebab-case.ts` (e.g., `use-keyboard-navigation.ts`)
- Utils: `kebab-case.ts` (e.g., `layout-engines.ts`)
- Types: `index.ts` in types/ directory

## Import/Export Patterns

```typescript
// Prefer named exports
export function ComponentName() { }
export const useHookName = () => { }
export interface TypeName { }

// Use index files for clean imports
// types/index.ts
export * from './node-types';
export * from './layout-types';

// components/index.ts
export { MapCanvas } from './MapCanvas';
export { NodeComponent } from './NodeComponent';
```

## Performance Patterns

```typescript
// Memoize expensive calculations
const positions = useMemo(() => {
  return calculateLayout(nodes, layoutType);
}, [nodes, layoutType]);

// Use callback for event handlers
const handleClick = useCallback((id: string) => {
  store.selectNode(id);
}, [store]);

// Debounce expensive operations
const debouncedUpdate = useMemo(
  () => debounce((updates) => {
    store.updateNode(id, updates);
  }, 300),
  [store, id]
);
```

## Error Handling

```typescript
// Simple error boundaries
export function ErrorBoundary({ children }: { children: React.ReactNode }) {
  const [hasError, setHasError] = useState(false);
  
  if (hasError) {
    return <div>Something went wrong. Please refresh the page.</div>;
  }
  
  return (
    <ErrorBoundaryComponent onError={() => setHasError(true)}>
      {children}
    </ErrorBoundaryComponent>
  );
}
```

}

export { NodeComponent };

```
