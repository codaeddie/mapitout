---
description: 
globs: src/components/canvas/**/*.tsx,src/hooks/use-canvas-*.ts
alwaysApply: false
---
---
description: Canvas rendering and performance optimization patterns
type: auto_attached
globs: ["src/components/canvas/**/*.tsx", "src/hooks/use-canvas-*.ts"]
---

# Canvas Performance and Rendering

## Hybrid Canvas + DOM Architecture

**Canvas Layer (Connections):**
```typescript
function ConnectionLayer({ connections, nodes }: ConnectionLayerProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Clear and redraw
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    connections.forEach(connection => {
      drawConnection(ctx, connection, nodes);
    });
  }, [connections, nodes]);
  
  return (
    <canvas 
      ref={canvasRef}
      className="absolute inset-0 pointer-events-none"
      width={1600}
      height={1200}
    />
  );
}
```

**DOM Layer (Nodes):**
```typescript
function NodeLayer({ nodes, selectedId, onSelect }: NodeLayerProps) {
  return (
    <div className="absolute inset-0">
      {Array.from(nodes.values()).map(node => (
        <NodeComponent
          key={node.id}
          node={node}
          isSelected={node.id === selectedId}
          onSelect={onSelect}
        />
      ))}
    </div>
  );
}
```

## Performance Optimization Patterns

**Virtualization for Large Datasets:**
```typescript
function useVirtualizedNodes(nodes: Map<string, Node>, viewBox: ViewBox) {
  return useMemo(() => {
    const visibleNodes = new Map<string, Node>();
    
    for (const [id, node] of nodes) {
      if (isNodeInViewport(node, viewBox)) {
        visibleNodes.set(id, node);
      }
    }
    
    return visibleNodes;
  }, [nodes, viewBox]);
}

function isNodeInViewport(node: Node, viewBox: ViewBox): boolean {
  const buffer = 100; // Render nodes slightly outside viewport
  
  return (
    node.x >= viewBox.x - buffer &&
    node.x <= viewBox.x + viewBox.width + buffer &&
    node.y >= viewBox.y - buffer &&
    node.y <= viewBox.y + viewBox.height + buffer
  );
}
```

**Debounced Updates:**
```typescript
function useDebounceLayoutCalculation(nodes: Map<string, Node>) {
  const [debouncedNodes, setDebouncedNodes] = useState(nodes);
  
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedNodes(nodes);
    }, 100);
    
    return () => clearTimeout(timer);
  }, [nodes]);
  
  return debouncedNodes;
}
```

## Canvas Rendering Patterns

**Bezier Curve Connections:**
```typescript
function drawConnection(
  ctx: CanvasRenderingContext2D,
  connection: Connection,
  nodes: Map<string, Node>
) {
  const fromNode = nodes.get(connection.from);
  const toNode = nodes.get(connection.to);
  
  if (!fromNode || !toNode) return;
  
  const controlPointX = (fromNode.x + toNode.x) / 2;
  const controlPointY = (fromNode.y + toNode.y) / 2;
  
  ctx.beginPath();
  ctx.moveTo(fromNode.x, fromNode.y);
  ctx.quadraticCurveTo(controlPointX, controlPointY, toNode.x, toNode.y);
  ctx.strokeStyle = '#64748b';
  ctx.lineWidth = 2;
  ctx.stroke();
}
```

**High DPI Support:**
```typescript
function setupHighDPICanvas(canvas: HTMLCanvasElement) {
  const ctx = canvas.getContext('2d');
  if (!ctx) return;
  
  const dpr = window.devicePixelRatio || 1;
  const rect = canvas.getBoundingClientRect();
  
  canvas.width = rect.width * dpr;
  canvas.height = rect.height * dpr;
  
  ctx.scale(dpr, dpr);
  
  canvas.style.width = `${rect.width}px`;
  canvas.style.height = `${rect.height}px`;
}
```

## Event Handling Performance

**Efficient Hit Testing:**
```typescript
function useCanvasHitTesting(nodes: Map<string, Node>) {
  const handleCanvasClick = useCallback((event: MouseEvent) => {
    const rect = (event.target as HTMLCanvasElement).getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    
    // Find clicked node using efficient spatial lookup
    const clickedNode = findNodeAt(x, y, nodes);
    
    if (clickedNode) {
      onNodeClick(clickedNode.id);
    }
  }, [nodes, onNodeClick]);
  
  return { handleCanvasClick };
}

function findNodeAt(x: number, y: number, nodes: Map<string, Node>): Node | null {
  for (const node of nodes.values()) {
    const nodeWidth = calculateNodeWidth(node.text);
    const nodeHeight = 40;
    
    if (
      x >= node.x - nodeWidth / 2 &&
      x <= node.x + nodeWidth / 2 &&
      y >= node.y - nodeHeight / 2 &&
      y <= node.y + nodeHeight / 2
    ) {
      return node;
    }
  }
  
  return null;
}
```

## Animation and Transitions

**Smooth Position Updates:**
```typescript
function useAnimatedPositions(nodes: Map<string, Node>) {
  const [animatedNodes, setAnimatedNodes] = useState(nodes);
  
  useEffect(() => {
    const updatePositions = () => {
      setAnimatedNodes(currentNodes => {
        const newNodes = new Map(currentNodes);
        
        for (const [id, targetNode] of nodes) {
          const currentNode = newNodes.get(id);
          if (currentNode) {
            // Lerp towards target position
            const lerpFactor = 0.1;
            newNodes.set(id, {
              ...currentNode,
              x: lerp(currentNode.x, targetNode.x, lerpFactor),
              y: lerp(currentNode.y, targetNode.y, lerpFactor),
            });
          }
        }
        
        return newNodes;
      });
    };
    
    const animationId = requestAnimationFrame(updatePositions);
    return () => cancelAnimationFrame(animationId);
  }, [nodes]);
  
  return animatedNodes;
}

function lerp(start: number, end: number, factor: number): number {
  return start + (end - start) * factor;
}
```

## Memory Management

**Canvas Cleanup:**
```typescript
function useCanvasCleanup(canvasRef: RefObject<HTMLCanvasElement>) {
  useEffect(() => {
    return () => {
      // Clean up canvas context
      const canvas = canvasRef.current;
      if (canvas) {
        const ctx = canvas.getContext('2d');
        if (ctx) {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
      }
    };
  }, []);
}
```

## Performance Monitoring

**Frame Rate Monitoring:**
```typescript
function usePerformanceMonitoring() {
  const [fps, setFps] = useState(0);
  
  useEffect(() => {
    let frameCount = 0;
    let lastTime = performance.now();
    
    const updateFPS = () => {
      frameCount++;
      const currentTime = performance.now();
      
      if (currentTime - lastTime >= 1000) {
        setFps(frameCount);
        frameCount = 0;
        lastTime = currentTime;
      }
      
      requestAnimationFrame(updateFPS);
    };
    
    requestAnimationFrame(updateFPS);
  }, []);
  
  return fps;
}

```