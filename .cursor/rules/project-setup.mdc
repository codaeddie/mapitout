
# MapItOut Project Setup - Simplified Architecture

## Project Overview
MapItOut is a visual tree mapping tool for organizing complex systems and technical knowledge. It features two focused layouts: Center (mind map style) and Top (hierarchical tree), with keyboard-driven creation and professional export capabilities.

## Core Architecture Philosophy

**Key Principle**: Structure is permanent, positions are temporary
- Nodes store relationships (parent/child), not coordinates
- Layout algorithms calculate positions on every render
- No stored x,y coordinates in node data
- Clean separation: data structure vs presentation

## Data Model (Simplified)

```typescript
interface Node {
  id: string;              // Unique identifier
  text: string;            // Display content
  children: string[];      // Child node IDs
  parent: string | null;   // Parent node ID
  metadata: {
    created: timestamp;
    modified: timestamp;
    collapsed: boolean;
  };
}

// Positions are calculated, not stored
interface Position {
  x: number;              // Calculated by layout engine
  y: number;              // Calculated by layout engine
  width: number;          // Based on text content
  height: number;         // Fixed or content-based
}
```

## Layout Engines (Two Only)

**Center Layout (Mind Map Style)**:
- Root at canvas center (800, 400)
- Tier 1: Alternate left/right of root
- Tier 2+: Branch based on parent position
- Distance increases by 50px per tier
- Spacing: 80px between siblings

**Top Layout (Hierarchical Tree)**:
- Root at top center
- Each tier is a horizontal row
- Tier spacing: 120px
- Even distribution within tiers
- Bottom-up positioning to avoid collisions

## Rendering Pipeline

**Every Frame**:
1. Get current node structure
2. Run active layout algorithm
3. Calculate all positions
4. Render nodes at positions
5. Draw connections

**Why Recalculate Every Time**:
- Guarantees consistency
- No position state to manage
- Layout changes are trivial
- Matches markmap approach

## Tech Stack
- React 18 + TypeScript
- Vite for build tooling
- Tailwind CSS for styling
- Zustand for state management
- HTML5 Canvas for rendering

## File Structure
```
src/
├── components/
│   ├── MapCanvas.tsx      # Main canvas container
│   ├── NodeComponent.tsx  # Individual node rendering
│   └── ui/                # UI controls
├── hooks/
│   ├── use-keyboard-navigation.ts
│   └── use-canvas-rendering.ts
├── stores/
│   └── map-store.ts       # Zustand store
├── types/
│   └── index.ts           # TypeScript interfaces
└── utils/
    ├── layout-engines.ts  # Two layout algorithms
    ├── positioning.ts     # Position calculations
    └── export.ts          # PNG export
```

## Development Priorities
1. **Keyboard Navigation First** - Tab (child), Enter (sibling)
2. **Two Layouts Only** - Center and Top, no more
3. **Structure Over Storage** - Calculate positions, don't store them
4. **Performance** - 60fps with 100+ nodes
5. **Export Quality** - High DPI PNG suitable for presentations

- [ ] Keyboard event listeners implemented
- [ ] Canvas rendering pipeline established
- [ ] Export functionality scaffolded

- [ ] Performance monitoring hooks added
