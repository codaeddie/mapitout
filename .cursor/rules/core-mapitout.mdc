
# MapItOut Core Development Rules

You are building MapItOut, a professional mind mapping tool for creating structured knowledge graphs with cybersecurity/technical aesthetics.

## Project Context

**Target**: Interactive mind mapping tool with keyboard-driven creation, automatic layout, and PNG export
**Tech Stack**: React 18, TypeScript, Vite, Tailwind CSS, Zustand, HTML5 Canvas
**Visual Style**: Dark theme, structured radial layouts, professional color coding

## System Architecture

```markdown
┌─────────────────────────────────────┐
│           UI Layer                  │
│  (React Components + Tailwind)      │
├─────────────────────────────────────┤
│         State Layer                 │
│      (Zustand + Persistence)        │
├─────────────────────────────────────┤
│        Rendering Layer              │
│    (Canvas + DOM Hybrid)            │
├─────────────────────────────────────┤
│        Utility Layer                │
│   (Positioning + Export + Utils)    │
└─────────────────────────────────────┘
```

## Core Architecture

**Hybrid Rendering Approach:**

- **Canvas Layer**: Connection lines and visual effects (performance-critical)
- **DOM Layer**: Node elements for text editing and interactions (accessibility)
- **Coordinate System**: Consistent mapping between Canvas and DOM positioning

**State Management Pattern:**

```typescript
interface MapState {
  nodes: Map<string, Node>;
  connections: Connection[];
  selectedId: string | null;
  layoutType: 'hierarchical' | 'web' | 'snake' | 'command';
  viewBox: { x: number; y: number; width: number; height: number };
  zoomLevel: number;
  
  // Actions return void, update state directly
  createNode: (text?: string, nodeType?: string) => void;
  createConnection: (from: string, to: string, type?: string) => void;
  updateNode: (id: string, updates: Partial<Node>) => void;
  selectNode: (id: string) => void;
  setLayoutType: (type: string) => void;
  setZoom: (level: number) => void;
  commitNodePosition: (id: string, x: number, y: number) => void;
}
```

## Node Data Structure

```typescript
interface Node {
  id: string;              // nanoid() generated
  text: string;            // User-visible text
  x: number;               // Canvas X coordinate
  y: number;               // Canvas Y coordinate
  nodeType: 'root' | 'hub' | 'leaf' | 'category' | 'parameter';
  category: number;        // Color category (0-5)
  isEditing: boolean;      // Text editing state
  layoutHints: {
    manualPosition?: boolean; // User dragged
    angle?: number;          // For radial layouts
    layer?: number;          // For hierarchical layouts
    sticky?: boolean;        // Position locked
  };
}

interface Connection {
  id: string;
  from: string;
  to: string;
  type: 'hierarchy' | 'association' | 'flow' | 'parameter';
  style: 'straight' | 'curved';
}
```

## Color System

```typescript
const NODE_COLORS = {
  0: '#f97316', // Orange - Central/Primary
  1: '#ef4444', // Red - High Priority
  2: '#3b82f6', // Blue - Secondary
  3: '#10b981', // Green - Supporting
  4: '#8b5cf6', // Purple - Specialized
  5: '#f59e0b', // Amber - Additional
} as const;
```

## Context-Aware Keyboard Shortcuts

- `Tab`: Create connected node (context-dependent)
- `Shift + Space`: Create unconnected node  
- `Enter`: Start/stop text editing
- `Shift + Enter`: New line in edit mode
- `Escape`: Exit edit mode
- `Arrow Keys`: Navigate between nodes
- `Delete`: Delete selected node
- `1-4`: Switch layout type (1=Tree, 2=Web, 3=Flow, 4=Command)
- `Ctrl/Cmd + +/-`: Zoom in/out
- `Ctrl/Cmd + 0`: Recalculate layout

## Environment-Specific Behavior

**Development Mode:**
- Fresh state on every reload
- Development tools and logging
- Reset functionality available
- Hot reload optimization

**Production Mode:**
- Full localStorage persistence
- Performance optimization
- Minimal logging
- User data preservation

## Performance Requirements

- **60fps rendering** with 100+ nodes
- **< 100ms response time** for all interactions
- **Virtualization** for large node counts
- **Debounced updates** for expensive operations
- **Canvas optimization** for smooth connection rendering

## Component Architecture

```markdown
App
├── MapCanvas (main container)
│   ├── ConnectionLayer (Canvas)
│   ├── NodeComponent (DOM)
│   └── FloatingToolbar (DOM)
└── Global Event Handlers
```

## File Structure

```markdown
src/
├── components/
│   ├── canvas/           # Canvas rendering components
│   ├── nodes/            # Node-related components
│   └── ui/               # UI controls and toolbar
├── hooks/
│   ├── use-keyboard-navigation.ts
│   ├── use-node-positioning.ts
│   └── use-canvas-rendering.ts
├── stores/
│   ├── map-store.ts      # Main Zustand store
│   └── ui-store.ts       # UI state store
├── types/
│   └── index.ts          # All TypeScript interfaces
└── utils/
    ├── layout-engines.ts # Layout algorithms
    ├── positioning.ts    # Node positioning logic
    ├── export.ts         # PNG export logic
    └── validation.ts     # Input validation
```

## Development Priorities

1. **Keyboard Navigation First** - All functionality accessible via keyboard
2. **Performance** - Smooth 60fps interactions
3. **Visual Consistency** - Professional technical aesthetic
4. **Export Quality** - High DPI PNG suitable for presentations
5. **State Management** - Reliable persistence and corruption recovery
