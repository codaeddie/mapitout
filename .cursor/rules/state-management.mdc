---
description: 
globs: src/stores/**/*.ts,src/hooks/use-*-store.ts
alwaysApply: false
---
---
description: Zustand state management patterns and store organization
type: auto_attached
globs: ["src/stores/**/*.ts", "src/hooks/use-*-store.ts"]
---

# Zustand State Management for MapItOut

## Core Store Structure

```typescript
interface MapState {
  // Core Data
  nodes: Map<string, Node>;
  rootId: string;
  selectedId: string | null;
  
  // View State
  viewBox: { x: number; y: number; width: number; height: number };
  zoomLevel: number;
  
  // UI State
  isEditing: boolean;
  editingNodeId: string | null;
  
  // Actions
  createNode: (parentId: string, text?: string) => void;
  updateNode: (id: string, updates: Partial<Node>) => void;
  deleteNode: (id: string) => void;
  selectNode: (id: string) => void;
  
  // Layout Actions
  updateNodePosition: (id: string, x: number, y: number) => void;
  recalculateLayout: () => void;
  
  // Export Actions
  exportToPNG: () => Promise<void>;
}
```

## Store Implementation Pattern

```typescript
import { create } from 'zustand';
import { nanoid } from 'nanoid';

const useMapStore = create<MapState>((set, get) => ({
  // Initial State
  nodes: new Map(),
  rootId: '',
  selectedId: null,
  viewBox: { x: 0, y: 0, width: 1600, height: 1200 },
  zoomLevel: 1,
  isEditing: false,
  editingNodeId: null,
  
  // Node Management Actions
  createNode: (parentId: string, text = 'New Node') => {
    const { nodes } = get();
    const parent = nodes.get(parentId);
    
    if (!parent) return;
    
    const newNode: Node = {
      id: nanoid(),
      text,
      x: 0,
      y: 0,
      parentId,
      children: [],
      tier: parent.tier + 1,
      category: parent.category,
      isEditing: false,
    };
    
    // Calculate position
    const position = calculateNodePosition(newNode, parent, nodes);
    newNode.x = position.x;
    newNode.y = position.y;
    
    set(state => {
      const newNodes = new Map(state.nodes);
      newNodes.set(newNode.id, newNode);
      
      // Update parent's children
      const updatedParent = { ...parent, children: [...parent.children, newNode.id] };
      newNodes.set(parentId, updatedParent);
      
      return {
        nodes: newNodes,
        selectedId: newNode.id,
      };
    });
  },
  
  updateNode: (id: string, updates: Partial<Node>) => {
    set(state => {
      const newNodes = new Map(state.nodes);
      const node = newNodes.get(id);
      
      if (!node) return state;
      
      newNodes.set(id, { ...node, ...updates });
      
      return { nodes: newNodes };
    });
  },
  
  deleteNode: (id: string) => {
    const { nodes, rootId } = get();
    
    // Don't delete root node
    if (id === rootId) return;
    
    const nodeToDelete = nodes.get(id);
    if (!nodeToDelete) return;
    
    set(state => {
      const newNodes = new Map(state.nodes);
      
      // Remove from parent's children
      if (nodeToDelete.parentId) {
        const parent = newNodes.get(nodeToDelete.parentId);
        if (parent) {
          const updatedParent = {
            ...parent,
            children: parent.children.filter(childId => childId !== id),
          };
          newNodes.set(nodeToDelete.parentId, updatedParent);
        }
      }
      
      // Delete node and all its children recursively
      const deleteNodeRecursive = (nodeId: string) => {
        const node = newNodes.get(nodeId);
        if (!node) return;
        
        // Delete all children first
        node.children.forEach(childId => deleteNodeRecursive(childId));
        
        // Delete the node
        newNodes.delete(nodeId);
      };
      
      deleteNodeRecursive(id);
      
      return {
        nodes: newNodes,
        selectedId: state.selectedId === id ? null : state.selectedId,
      };
    });
  },
  
  selectNode: (id: string) => {
    set({ selectedId: id });
  },
  
  // Layout Actions
  updateNodePosition: (id: string, x: number, y: number) => {
    set(state => {
      const newNodes = new Map(state.nodes);
      const node = newNodes.get(id);
      
      if (!node) return state;
      
      newNodes.set(id, { ...node, x, y });
      
      return { nodes: newNodes };
    });
  },
  
  recalculateLayout: () => {
    const { nodes, rootId } = get();
    
    set(state => {
      const newNodes = new Map(state.nodes);
      
      // Recalculate positions for all nodes
      const recalculatePositions = (nodeId: string) => {
        const node = newNodes.get(nodeId);
        if (!node) return;
        
        node.children.forEach(childId => {
          const child = newNodes.get(childId);
          if (child) {
            const newPosition = calculateNodePosition(child, node, newNodes);
            newNodes.set(childId, { ...child, x: newPosition.x, y: newPosition.y });
            recalculatePositions(childId);
          }
        });
      };
      
      recalculatePositions(rootId);
      
      return { nodes: newNodes };
    });
  },
  
  // Export Actions
  exportToPNG: async () => {
    // Implementation would go here
    console.log('Exporting to PNG...');
  },
}));
```

## Selector Patterns

**Efficient Selectors:**
```typescript
// Good: Specific selectors prevent unnecessary re-renders
const selectedNode = useMapStore(state => 
  state.selectedId ? state.nodes.get(state.selectedId) : null
);

const nodeChildren = useMapStore(state => {
  const node = state.nodes.get(nodeId);
  return node ? node.children.map(id => state.nodes.get(id)).filter(Boolean) : [];
});

// Bad: Will re-render on any state change
const entireState = useMapStore(state => state);
```

**Computed Values:**
```typescript
const useNodeStats = () => {
  return useMapStore(state => ({
    totalNodes: state.nodes.size,
    maxTier: Math.max(...Array.from(state.nodes.values()).map(n => n.tier)),
    selectedNodeTier: state.selectedId ? state.nodes.get(state.selectedId)?.tier : null,
  }));
};
```

## Action Patterns

**Batch Updates:**
```typescript
// Good: Single state update
const createMultipleNodes = (parentId: string, nodeTexts: string[]) => {
  const { nodes } = get();
  const parent = nodes.get(parentId);
  
  if (!parent) return;
  
  set(state => {
    const newNodes = new Map(state.nodes);
    const newNodeIds: string[] = [];
    
    nodeTexts.forEach(text => {
      const newNode: Node = {
        id: nanoid(),
        text,
        parentId,
        // ... other properties
      };
      
      newNodes.set(newNode.id, newNode);
      newNodeIds.push(newNode.id);
    });
    
    // Update parent once
    const updatedParent = {
      ...parent,
      children: [...parent.children, ...newNodeIds],
    };
    newNodes.set(parentId, updatedParent);
    
    return { nodes: newNodes };
  });
};
```

## Persistence Patterns

**Auto-Save to localStorage:**
```typescript
const useMapStore = create<MapState>()(
  persist(
    (set, get) => ({
      // ... store implementation
    }),
    {
      name: 'mapitout-storage',
      storage: createJSONStorage(() => localStorage),
      // Only persist essential data
      partialize: (state) => ({
        nodes: Array.from(state.nodes.entries()),
        rootId: state.rootId,
        viewBox: state.viewBox,
        zoomLevel: state.zoomLevel,
      }),
    }
  )
);
```

## Store Organization

**Split Complex State:**
```typescript
// Separate UI state from data state
const useUIStore = create<UIState>((set) => ({
  sidebarOpen: false,
  showGrid: true,
  theme: 'dark',
  
  toggleSidebar: () => set(state => ({ sidebarOpen: !state.sidebarOpen })),
  toggleGrid: () => set(state => ({ showGrid: !state.showGrid })),
}));

// Keep map data separate
const useMapStore = create<MapState>((set, get) => ({
  // ... map-specific state
}));
```

## Testing Patterns

**Store Testing:**
```typescript
// Test store actions
describe('MapStore', () => {
  beforeEach(() => {
    useMapStore.setState({
      nodes: new Map(),
      rootId: '',
      selectedId: null,
    });
  });
  
  test('creates new node', () => {
    const { createNode } = useMapStore.getState();
    
    createNode('parent-id', 'Test Node');
    
    const { nodes } = useMapStore.getState();
    expect(nodes.size).toBe(1);
  });
});

```